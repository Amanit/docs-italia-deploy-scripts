
- name: support packages
  apt: pkg={{ item }} state=present update_cache=true install_recommends=no
  with_items:
    - git
    - redis-server
    - redis-tools
    - ca-certificates
    - gunicorn
  when: app == 1
  tags:
     - setup

- name: check deployment group
  user: name={{ rtd_user }} state=present
  when: app == 1 or worker == 1
  tags:
     - setup
     - deploy

- name: check deployment user
  user: name={{ rtd_user }} state=present home={{ rtd_home }} uid=1005 group={{ rtd_user }} shell=/bin/bash
  when: app == 1 or worker == 1
  tags:
     - setup
     - deploy

- name: ensure docs dir structure
  file: path="{{ rtd_home }}" state=directory mode=0755 owner={{ rtd_user }}
  when: app == 1
  tags:
     - setup
     - deploy

- name: add bash_profile for deployment user
  become_user: "{{ rtd_user }}"
  template: src=../templates/project/bash_profile dest="{{ rtd_home }}/.bash_profile"
  when: app == 1 or worker == 1
  tags:
     - setup

- name: ensure directory structure
  file: path="{{ item }}" state=directory mode=0755 owner={{ nginx_user }}
  with_items:
    - "{{ nginx_logs }}"
  when: app == 1
  tags:
     - setup
     - deploy

- name: ensure directory structure
  file: path="{{ rtd_home }}/{{ item }}" state=directory mode=0755 owner={{ rtd_user }}
  with_items:
    - log
  when: app == 1
  tags:
     - setup
     - deploy

- name: check postgres user
  become_user: "postgres"
  postgresql_user: name={{ rtd_db_user }} password={{ rtd_db_pass }}
  when: sql == 1
  tags:
     - setup
     - deploy

- name: check docs.italia.it db
  become_user: "postgres"
  postgresql_db: name={{ rtd_db_name }} owner={{ rtd_db_user }}
  when: sql == 1
  tags:
     - setup
     - deploy

- name: install rtd
  become_user: "{{ rtd_user }}"
  git: repo={{ rtd_repo }} dest={{ rtd_root }} version={{ rtd_branch }} force={{ force }}
  when: app == 1
  notify:
    - restart rtd gunicorn
    - restart rtd celery
  tags:
     - deploy

- name: update virtualenv (python 3)
  become_user: "{{ rtd_user }}"
  pip:
    requirements: "{{ rtd_root }}/requirements/deploy.txt"
    virtualenv: "{{ rtd_virtualenv }}"
    virtualenv_command: "/usr/bin/python{{ python_version }} -m venv"
  when: app == 1 and python_version != 2.7
  tags:
     - deploy

- name: update virtualenv (python 2.7)
  become_user: "{{ rtd_user }}"
  pip:
    requirements: "{{ rtd_root }}/requirements/deploy.txt"
    virtualenv: "{{ rtd_virtualenv }}"
    virtualenv_command: "/usr/bin/virtualenv -p /usr/bin/python{{ python_version }}"
  when: app == 1 and python_version == 2.7
  tags:
     - deploy

- name: install additional requirements in virtualenv
  become_user: "{{ rtd_user }}"
  pip:
    name: "{{ requirements_extra }}"
    virtualenv: "{{ rtd_virtualenv }}"
  when: app == 1
  tags:
     - deploy

- name: install sentry dependency
  become_user: "{{ rtd_user }}"
  pip:
    name: "raven>=6.9"
    virtualenv: "{{ rtd_virtualenv }}"
  when: app == 1 and SENTRY_DSN
  tags:
     - deploy

- name: install converter
  become_user: "{{ rtd_user }}"
  pip:
    name: "{{ converter_app_repo }}@{{ converter_app_branch }}#egg=docs_italia_convertitore_web"
    virtualenv: "{{ rtd_virtualenv }}"
    editable: 1
  when: app == 1 and converter == 1
  tags:
     - deploy

- name: django configuration
  become_user: "{{ rtd_user }}"
  template: src=../templates/project/{{ item }} dest="{{ rtd_root }}/readthedocs/settings/{{ item }}"
  with_items:
    - managed.py
  when: app == 1
  tags:
     - deploy
     - settings

- name: run migrations
  become_user: "{{ rtd_user }}"
  command: "{{ rtd_virtualenv }}/bin/python {{ rtd_root }}/manage.py migrate --settings=readthedocs.settings.managed"
  when: app == 1
  tags:
     - deploy

- name: check if slumber api consumer django user exists
  become_user: "{{ rtd_user }}"
  command: "{{ rtd_virtualenv }}/bin/python {{ rtd_root }}/manage.py shell --settings=readthedocs.settings.managed"
  args:
    stdin: "from django.contrib.auth.models import User; User.objects.filter(username='{{ SLUMBER_USERNAME }}').exists()"
  register: build_user_available
  ignore_errors: yes
  when: app == 1
  tags:
     - deploy

- name: create slumber api consumer django user if not available
  become_user: "{{ rtd_user }}"
  command: "{{ rtd_virtualenv }}/bin/python {{ rtd_root }}/manage.py shell --settings=readthedocs.settings.managed"
  args:
    stdin: "from django.contrib.auth.models import User; User.objects.create_user('{{ SLUMBER_USERNAME }}', password='{{ SLUMBER_PASSWORD }}', is_staff=True);"
  when: app == 1 and 'False' in build_user_available.stdout
  tags:
     - deploy

- name: add proper permission to slumber api consumer django user
  become_user: "{{ rtd_user }}"
  command: "{{ rtd_virtualenv }}/bin/python {{ rtd_root }}/manage.py shell --settings=readthedocs.settings.managed"
  args:
    stdin: "from django.contrib.auth.models import User, Permission; u = User.objects.get(username='{{ SLUMBER_USERNAME }}'); p = Permission.objects.get(codename='view_project', content_type__app_label='projects'); u.user_permissions.add(p); p = Permission.objects.get(codename='view_version', content_type__app_label='builds'); u.user_permissions.add(p);"
  when: app == 1
  tags:
     - deploy

- name: Build documents script
  template:
    src: "../templates/project/build_docs.sh"
    dest: "{{ rtd_build_script }}"
    force: 1
    mode: 0755
  when: app == 1
  tags:
     - deploy

- name: run collectstatic
  become_user: "{{ rtd_user }}"
  command: "{{ rtd_virtualenv }}/bin/python {{ rtd_root }}/manage.py collectstatic -lc --noinput --settings=readthedocs.settings.managed"
  when: app == 1
  tags:
     - deploy

- name: run provision_elasticsearch command
  become_user: "{{ rtd_user }}"
  command: "{{ rtd_virtualenv }}/bin/python {{ rtd_root }}/manage.py provision_elasticsearch --settings=readthedocs.settings.managed"
  ignore_errors: yes
  when: app == 1
  tags:
     - setup

- name: systemd environment
  template: src=../templates/systemd/{{ item }}  dest="{{ rtd_home}}/{{ item }}" mode=644
  with_items:
    - rtd_environment
  when: app == 1
  tags:
     - configuration
     - deploy

- name: tempfile
  template: src=../templates/systemd/tempfile  dest=/etc/tmpfiles.d/rtd.conf mode=644 force=1
  when: app == 1
  tags:
     - deploy

- name: systemd-tempfile
  command: systemd-tmpfiles --create
  when: app == 1
  tags:
     - configuration
     - deploy

- name: systemd configuration
  template: src=../templates/systemd/{{ item }}  dest=/etc/systemd/system/{{ item }} mode=644 force=1
  with_items: "{{ systemd_rtd_services }}"
  when: app == 1
  tags:
     - configuration
     - deploy

- name: systemd enable
  systemd: name="{{ item }}" state=restarted enabled=True daemon_reload=yes
  with_items: "{{ systemd_rtd_services }}"
  when: app == 1
  tags:
     - configuration
     - deploy
     - settings

- name: nginx configuration
  template: src=../templates/nginx/{{ item }}  dest=/etc/nginx/{{ item  }} force=1
  with_items:
    - nginx.conf
    - conf.d/general-configuration.conf
    - sites-available/readthedocs-main.conf
    - snippets/docs-redirects.conf
    - fallback_defaults
    - proxy_defaults
  notify: reload nginx
  when: http == 1
  tags:
     - configuration
     - deploy  # this is only temporary

- name: disable default  virtualhost
  file: path=/etc/nginx/sites-enabled/default state=absent
  notify: restart nginx
  when: http == 1
  tags:
     - configuration
     - deploy  # this is only temporary

- name: log dir
  file: path="{{ nginx_logs }}" state=directory owner=www-data group=adm
  when: http == 1

- name: enable virtualhost
  file: src=/etc/nginx/sites-available/{{ item }} dest=/etc/nginx/sites-enabled/{{ item }} state=link
  with_items:
    - readthedocs-main.conf
  notify: restart nginx
  when: http == 1
  tags:
     - configuration
     - deploy  # this is only temporary
